{"message":"found possibly newer version of crate `core` which `lazy_static` depends on","code":{"code":"E0460","explanation":"Found possibly newer version of crate `..` which `..` depends on.\n\nConsider these erroneous files:\n\n`a1.rs`\n```ignore (needs-linkage-with-other-tests)\n#![crate_name = \"a\"]\n\npub fn foo<T>() {}\n```\n\n`a2.rs`\n```ignore (needs-linkage-with-other-tests)\n#![crate_name = \"a\"]\n\npub fn foo<T>() {\n    println!(\"foo<T>()\");\n}\n```\n\n`b.rs`\n```ignore (needs-linkage-with-other-tests)\n#![crate_name = \"b\"]\n\nextern crate a; // linked with `a1.rs`\n\npub fn foo() {\n    a::foo::<isize>();\n}\n```\n\n`main.rs`\n```ignore (needs-linkage-with-other-tests)\nextern crate a; // linked with `a2.rs`\nextern crate b; // error: found possibly newer version of crate `a` which `b`\n                //        depends on\n\nfn main() {}\n```\n\nThe dependency graph of this program can be represented as follows:\n```text\n    crate `main`\n         |\n         +-------------+\n         |             |\n         |             v\ndepends: |         crate `b`\n `a` v1  |             |\n         |             | depends:\n         |             |  `a` v2\n         v             |\n      crate `a` <------+\n```\n\nCrate `main` depends on crate `a` (version 1) and crate `b` which in turn\ndepends on crate `a` (version 2); this discrepancy in versions cannot be\nreconciled. This difference in versions typically occurs when one crate is\ncompiled and linked, then updated and linked to another crate. The crate\n\"version\" is a SVH (Strict Version Hash) of the crate in an\nimplementation-specific way. Note that this error can *only* occur when\ndirectly compiling and linking with `rustc`; [Cargo] automatically resolves\ndependencies, without using the compiler's own dependency management that\ncauses this issue.\n\nThis error can be fixed by:\n * Using [Cargo], the Rust package manager, automatically fixing this issue.\n * Recompiling crate `a` so that both crate `b` and `main` have a uniform\n   version to depend on.\n\n[Cargo]: ../cargo/index.html\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":152,"byte_end":177,"line_start":12,"line_end":12,"column_start":1,"column_end":26,"is_primary":true,"text":[{"text":"extern crate lazy_static;","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps that crate needs to be recompiled?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following crate versions were found:\ncrate `core`: /usr/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcore-4d9e46ff63d389b6.rlib\ncrate `lazy_static`: /home/jannis/projects/new-FSS/pika/libfss/target/debug/deps/liblazy_static-9563a4117a687d5f.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0460]\u001b[0m\u001b[0m\u001b[1m: found possibly newer version of crate `core` which `lazy_static` depends on\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:12:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mextern crate lazy_static;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps that crate needs to be recompiled?\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following crate versions were found:\u001b[0m\n\u001b[0m           crate `core`: /usr/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcore-4d9e46ff63d389b6.rlib\u001b[0m\n\u001b[0m           crate `lazy_static`: /home/jannis/projects/new-FSS/pika/libfss/target/debug/deps/liblazy_static-9563a4117a687d5f.rmeta\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `aes` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":113,"byte_end":116,"line_start":5,"line_end":5,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"use aes::cipher::{KeyInit, BlockCipher,BlockEncrypt,BlockDecrypt};","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `aes` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse aes::cipher::{KeyInit, BlockCipher,BlockEncrypt,BlockDecrypt};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `aes` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":180,"byte_end":183,"line_start":6,"line_end":6,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"use aes::cipher::{generic_array::GenericArray};","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `aes` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse aes::cipher::{generic_array::GenericArray};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `aes` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":228,"byte_end":231,"line_start":7,"line_end":7,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"use aes::Aes128;","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `aes` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse aes::Aes128;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `aes` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":268,"byte_end":271,"line_start":11,"line_end":11,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"use aes::cipher::{KeyIvInit, StreamCipher, StreamCipherSeek};","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `aes` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse aes::cipher::{KeyIvInit, StreamCipher, StreamCipherSeek};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":379,"byte_end":383,"line_start":15,"line_end":15,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"use rand::Rng;","highlight_start":5,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:15:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rand::Rng;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand_core` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":394,"byte_end":403,"line_start":16,"line_end":16,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"use rand_core::RngCore;","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand_core` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:16:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rand_core::RngCore;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":419,"byte_end":424,"line_start":18,"line_end":18,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Deserialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:18:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Deserialize;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":443,"byte_end":448,"line_start":19,"line_end":19,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Serialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:19:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Serialize;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/idpf.rs","byte_start":38,"byte_end":43,"line_start":3,"line_end":3,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Deserialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/idpf.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Deserialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/idpf.rs","byte_start":62,"byte_end":67,"line_start":4,"line_end":4,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Serialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/idpf.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Serialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/dpf.rs","byte_start":38,"byte_end":43,"line_start":3,"line_end":3,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Deserialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dpf.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Deserialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/dpf.rs","byte_start":62,"byte_end":67,"line_start":4,"line_end":4,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Serialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dpf.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Serialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/dcf.rs","byte_start":87,"byte_end":92,"line_start":4,"line_end":4,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Deserialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dcf.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Deserialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/dcf.rs","byte_start":111,"byte_end":116,"line_start":5,"line_end":5,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Serialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dcf.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Serialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/ic.rs","byte_start":147,"byte_end":152,"line_start":5,"line_end":5,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Deserialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ic.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Deserialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/ic.rs","byte_start":171,"byte_end":176,"line_start":6,"line_end":6,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Serialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ic.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Serialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `bincode` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/condEval.rs","byte_start":178,"byte_end":185,"line_start":6,"line_end":6,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"use bincode::*;","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `bincode` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/condEval.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse bincode::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/beavertuple.rs","byte_start":221,"byte_end":226,"line_start":9,"line_end":9,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Deserialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/beavertuple.rs:9:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Deserialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/beavertuple.rs","byte_start":246,"byte_end":251,"line_start":10,"line_end":10,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Serialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/beavertuple.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Serialize;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/mbeaver.rs","byte_start":93,"byte_end":98,"line_start":5,"line_end":5,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::{Serialize, Deserialize};","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mbeaver.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::{Serialize, Deserialize};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/qmatrix.rs","byte_start":37,"byte_end":42,"line_start":3,"line_end":3,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Deserialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/qmatrix.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Deserialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/qmatrix.rs","byte_start":61,"byte_end":66,"line_start":4,"line_end":4,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Serialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/qmatrix.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Serialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `num` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/ring.rs","byte_start":22,"byte_end":25,"line_start":2,"line_end":2,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"use num::ToPrimitive;","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `num` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ring.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num::ToPrimitive;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/ring.rs","byte_start":44,"byte_end":49,"line_start":3,"line_end":3,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Deserialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ring.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Deserialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/ring.rs","byte_start":68,"byte_end":73,"line_start":4,"line_end":4,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Serialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ring.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Serialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/binary.rs","byte_start":5,"byte_end":10,"line_start":2,"line_end":2,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Deserialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binary.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Deserialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/binary.rs","byte_start":29,"byte_end":34,"line_start":3,"line_end":3,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Serialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binary.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Serialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/condEval.rs","byte_start":132,"byte_end":137,"line_start":4,"line_end":4,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Deserialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/condEval.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Deserialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/condEval.rs","byte_start":156,"byte_end":161,"line_start":5,"line_end":5,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use serde::Serialize;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `serde` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/condEval.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Serialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"unresolved imports `serde::Deserialize`, `serde::Serialize`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/condEval.rs","byte_start":132,"byte_end":150,"line_start":4,"line_end":4,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use serde::Deserialize;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/condEval.rs","byte_start":156,"byte_end":172,"line_start":5,"line_end":5,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use serde::Serialize;","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `serde::Deserialize`, `serde::Serialize`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/condEval.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Deserialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Serialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Serialize`","code":null,"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":1058,"byte_end":1067,"line_start":46,"line_end":46,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Serialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:46:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Deserialize`","code":null,"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":1069,"byte_end":1080,"line_start":46,"line_end":46,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Deserialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:46:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Serialize`","code":null,"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":1351,"byte_end":1360,"line_start":59,"line_end":59,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Serialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:59:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Deserialize`","code":null,"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":1362,"byte_end":1373,"line_start":59,"line_end":59,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Deserialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:59:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Serialize`","code":null,"level":"error","spans":[{"file_name":"src/idpf.rs","byte_start":166,"byte_end":175,"line_start":10,"line_end":10,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Serialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/idpf.rs:10:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Deserialize`","code":null,"level":"error","spans":[{"file_name":"src/idpf.rs","byte_start":177,"byte_end":188,"line_start":10,"line_end":10,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Deserialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/idpf.rs:10:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Serialize`","code":null,"level":"error","spans":[{"file_name":"src/idpf.rs","byte_start":298,"byte_end":307,"line_start":17,"line_end":17,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Serialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/idpf.rs:17:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Deserialize`","code":null,"level":"error","spans":[{"file_name":"src/idpf.rs","byte_start":309,"byte_end":320,"line_start":17,"line_end":17,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Deserialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/idpf.rs:17:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Serialize`","code":null,"level":"error","spans":[{"file_name":"src/dpf.rs","byte_start":192,"byte_end":201,"line_start":10,"line_end":10,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Serialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dpf.rs:10:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Deserialize`","code":null,"level":"error","spans":[{"file_name":"src/dpf.rs","byte_start":203,"byte_end":214,"line_start":10,"line_end":10,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Deserialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dpf.rs:10:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Serialize`","code":null,"level":"error","spans":[{"file_name":"src/dpf.rs","byte_start":1062,"byte_end":1071,"line_start":36,"line_end":36,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Serialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dpf.rs:36:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Deserialize`","code":null,"level":"error","spans":[{"file_name":"src/dpf.rs","byte_start":1073,"byte_end":1084,"line_start":36,"line_end":36,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Deserialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dpf.rs:36:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Serialize`","code":null,"level":"error","spans":[{"file_name":"src/dcf.rs","byte_start":214,"byte_end":223,"line_start":10,"line_end":10,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Serialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dcf.rs:10:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Deserialize`","code":null,"level":"error","spans":[{"file_name":"src/dcf.rs","byte_start":225,"byte_end":236,"line_start":10,"line_end":10,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Deserialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dcf.rs:10:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Serialize`","code":null,"level":"error","spans":[{"file_name":"src/dcf.rs","byte_start":345,"byte_end":354,"line_start":17,"line_end":17,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Serialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dcf.rs:17:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Deserialize`","code":null,"level":"error","spans":[{"file_name":"src/dcf.rs","byte_start":356,"byte_end":367,"line_start":17,"line_end":17,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Deserialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dcf.rs:17:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Serialize`","code":null,"level":"error","spans":[{"file_name":"src/ic.rs","byte_start":213,"byte_end":222,"line_start":8,"line_end":8,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Serialize`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ic.rs:8:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Deserialize`","code":null,"level":"error","spans":[{"file_name":"src/ic.rs","byte_start":224,"byte_end":235,"line_start":8,"line_end":8,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Deserialize`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ic.rs:8:35\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Serialize`","code":null,"level":"error","spans":[{"file_name":"src/ic.rs","byte_start":4126,"byte_end":4135,"line_start":147,"line_end":147,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Serialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ic.rs:147:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Deserialize`","code":null,"level":"error","spans":[{"file_name":"src/ic.rs","byte_start":4137,"byte_end":4148,"line_start":147,"line_end":147,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Deserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ic.rs:147:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Serialize`","code":null,"level":"error","spans":[{"file_name":"src/condEval.rs","byte_start":250,"byte_end":259,"line_start":9,"line_end":9,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Serialize`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/condEval.rs:9:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Deserialize`","code":null,"level":"error","spans":[{"file_name":"src/condEval.rs","byte_start":261,"byte_end":272,"line_start":9,"line_end":9,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Deserialize`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/condEval.rs:9:35\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Serialize`","code":null,"level":"error","spans":[{"file_name":"src/beavertuple.rs","byte_start":323,"byte_end":332,"line_start":14,"line_end":14,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Serialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/beavertuple.rs:14:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Deserialize`","code":null,"level":"error","spans":[{"file_name":"src/beavertuple.rs","byte_start":334,"byte_end":345,"line_start":14,"line_end":14,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Deserialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/beavertuple.rs:14:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Serialize`","code":null,"level":"error","spans":[{"file_name":"src/mbeaver.rs","byte_start":195,"byte_end":204,"line_start":10,"line_end":10,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Serialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mbeaver.rs:10:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Deserialize`","code":null,"level":"error","spans":[{"file_name":"src/mbeaver.rs","byte_start":206,"byte_end":217,"line_start":10,"line_end":10,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Deserialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mbeaver.rs:10:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Serialize`","code":null,"level":"error","spans":[{"file_name":"src/mbeaver.rs","byte_start":4822,"byte_end":4831,"line_start":170,"line_end":170,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Serialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mbeaver.rs:170:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Deserialize`","code":null,"level":"error","spans":[{"file_name":"src/mbeaver.rs","byte_start":4833,"byte_end":4844,"line_start":170,"line_end":170,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Deserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mbeaver.rs:170:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Serialize`","code":null,"level":"error","spans":[{"file_name":"src/qmatrix.rs","byte_start":1363,"byte_end":1372,"line_start":39,"line_end":39,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Serialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/qmatrix.rs:39:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Deserialize`","code":null,"level":"error","spans":[{"file_name":"src/qmatrix.rs","byte_start":1374,"byte_end":1385,"line_start":39,"line_end":39,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Deserialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/qmatrix.rs:39:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Serialize`","code":null,"level":"error","spans":[{"file_name":"src/qmatrix.rs","byte_start":2626,"byte_end":2635,"line_start":89,"line_end":89,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Serialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/qmatrix.rs:89:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Deserialize`","code":null,"level":"error","spans":[{"file_name":"src/qmatrix.rs","byte_start":2637,"byte_end":2648,"line_start":89,"line_end":89,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Serialize, Deserialize)]","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Deserialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/qmatrix.rs:89:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Serialize`","code":null,"level":"error","spans":[{"file_name":"src/ring.rs","byte_start":227,"byte_end":236,"line_start":10,"line_end":10,"column_start":45,"column_end":54,"is_primary":true,"text":[{"text":"#[derive(Clone, Copy, Debug, Eq, PartialEq, Serialize, Deserialize)]","highlight_start":45,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Serialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ring.rs:10:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Copy, Debug, Eq, PartialEq, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Deserialize`","code":null,"level":"error","spans":[{"file_name":"src/ring.rs","byte_start":238,"byte_end":249,"line_start":10,"line_end":10,"column_start":56,"column_end":67,"is_primary":true,"text":[{"text":"#[derive(Clone, Copy, Debug, Eq, PartialEq, Serialize, Deserialize)]","highlight_start":56,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Deserialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ring.rs:10:56\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Copy, Debug, Eq, PartialEq, Serialize, Deserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Serialize`","code":null,"level":"error","spans":[{"file_name":"src/binary.rs","byte_start":86,"byte_end":95,"line_start":5,"line_end":5,"column_start":39,"column_end":48,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Eq, PartialEq, Serialize, Deserialize)]","highlight_start":39,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Serialize`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binary.rs:5:39\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Eq, PartialEq, Serialize, Deserialize)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the derive macro `Deserialize`","code":null,"level":"error","spans":[{"file_name":"src/binary.rs","byte_start":97,"byte_end":108,"line_start":5,"line_end":5,"column_start":50,"column_end":61,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug, Eq, PartialEq, Serialize, Deserialize)]","highlight_start":50,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the derive macro `Deserialize`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binary.rs:5:50\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, Eq, PartialEq, Serialize, Deserialize)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":1206,"byte_end":1210,"line_start":52,"line_end":52,"column_start":47,"column_end":51,"is_primary":true,"text":[{"text":"    fn from_rng(&mut self, stream: &mut (impl rand::Rng + rand_core::RngCore));","highlight_start":47,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:52:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn from_rng(&mut self, stream: &mut (impl rand::Rng + rand_core::RngCore));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand_core` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":1218,"byte_end":1227,"line_start":52,"line_end":52,"column_start":59,"column_end":68,"is_primary":true,"text":[{"text":"    fn from_rng(&mut self, stream: &mut (impl rand::Rng + rand_core::RngCore));","highlight_start":59,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand_core` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:52:59\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn from_rng(&mut self, stream: &mut (impl rand::Rng + rand_core::RngCore));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":1298,"byte_end":1302,"line_start":55,"line_end":55,"column_start":28,"column_end":32,"is_primary":true,"text":[{"text":"        self.from_rng(&mut rand::thread_rng());","highlight_start":28,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:55:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.from_rng(&mut rand::thread_rng());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":2294,"byte_end":2298,"line_start":105,"line_end":105,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"        rand::thread_rng().fill(&mut key);","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:105:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        rand::thread_rng().fill(&mut key);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":9146,"byte_end":9150,"line_start":344,"line_end":344,"column_start":6,"column_end":10,"is_primary":true,"text":[{"text":"impl rand::RngCore for FixedKeyPrgStream {   ","highlight_start":6,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:344:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m344\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl rand::RngCore for FixedKeyPrgStream {   \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand_core` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":9246,"byte_end":9255,"line_start":346,"line_end":346,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"        let u_32_num = rand_core::impls::next_u32_via_fill(self);","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand_core` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:346:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m346\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let u_32_num = rand_core::impls::next_u32_via_fill(self);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand_core` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":9364,"byte_end":9373,"line_start":351,"line_end":351,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"        rand_core::impls::next_u64_via_fill(self)","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand_core` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:351:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m351\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        rand_core::impls::next_u64_via_fill(self)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/prg.rs","byte_start":10159,"byte_end":10163,"line_start":375,"line_end":375,"column_start":65,"column_end":69,"is_primary":true,"text":[{"text":"    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> {","highlight_start":65,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/prg.rs:375:65\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m375\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `bincode` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/condEval.rs","byte_start":1375,"byte_end":1382,"line_start":44,"line_end":44,"column_start":45,"column_end":52,"is_primary":true,"text":[{"text":"        let (mut key0_Bin, mut key1_Bin) = (bincode::serialize(&key0).expect(\"Serialize value error\"), bincode::serialize(&key1).expect(\"Serialize value error\"));","highlight_start":45,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `bincode` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/condEval.rs:44:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let (mut key0_Bin, mut key1_Bin) = (bincode::serialize(&key0).expect(\"Serialize value error\"), bincode::serialize(&key1).expect(\"Se\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `bincode` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/condEval.rs","byte_start":1434,"byte_end":1441,"line_start":44,"line_end":44,"column_start":104,"column_end":111,"is_primary":true,"text":[{"text":"        let (mut key0_Bin, mut key1_Bin) = (bincode::serialize(&key0).expect(\"Serialize value error\"), bincode::serialize(&key1).expect(\"Serialize value error\"));","highlight_start":104,"highlight_end":111}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `bincode` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/condEval.rs:44:104\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let (mut key0_Bin, mut key1_Bin) = (bincode::serialize(&key0).expect(\"Serialize value error\"), bincode::serialize(&key1).expect(\"Se\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `bincode` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/condEval.rs","byte_start":4587,"byte_end":4594,"line_start":130,"line_end":130,"column_start":15,"column_end":22,"is_primary":true,"text":[{"text":"        match bincode::deserialize(&decrypted[..decrypted.len()-1]){","highlight_start":15,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `bincode` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/condEval.rs:130:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match bincode::deserialize(&decrypted[..decrypted.len()-1]){\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `bincode` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/condEval.rs","byte_start":5586,"byte_end":5593,"line_start":153,"line_end":153,"column_start":15,"column_end":22,"is_primary":true,"text":[{"text":"        match bincode::deserialize(&decrypted[..decrypted.len()-1]){","highlight_start":15,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `bincode` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/condEval.rs:153:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match bincode::deserialize(&decrypted[..decrypted.len()-1]){\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/ring.rs","byte_start":2681,"byte_end":2685,"line_start":131,"line_end":131,"column_start":43,"column_end":47,"is_primary":true,"text":[{"text":"    fn from_rng(&mut self, rng: &mut impl rand::Rng) {","highlight_start":43,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ring.rs:131:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn from_rng(&mut self, rng: &mut impl rand::Rng) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\n"}
{"message":"the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.","code":{"code":"E0519","explanation":"The current crate is indistinguishable from one of its dependencies, in terms\nof metadata.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\npub fn foo() {}\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_name = \"a\"]\n#![crate_type = \"lib\"]\n\n// error: the current crate is indistinguishable from one of its dependencies:\n//        it has the same crate-name `a` and was compiled with the same\n//        `-C metadata` arguments. This will result in symbol conflicts between\n//        the two.\nextern crate a;\n\npub fn foo() {}\n\nfn bar() {\n    a::foo(); // is this calling the local crate or the dependency?\n}\n```\n\nThe above example compiles two crates with exactly the same name and\n`crate_type` (plus any other metadata). This causes an error because it becomes\nimpossible for the compiler to distinguish between symbols (`pub` item names).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate with different metadata (different name/\n   `crate_type`).\n"},"level":"error","spans":[{"file_name":"src/binary.rs","byte_start":1529,"byte_end":1533,"line_start":83,"line_end":83,"column_start":43,"column_end":47,"is_primary":true,"text":[{"text":"    fn from_rng(&mut self, rng: &mut impl rand::Rng) {","highlight_start":43,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0519]\u001b[0m\u001b[0m\u001b[1m: the current crate is indistinguishable from one of its dependencies: it has the same crate-name `rand` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binary.rs:83:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn from_rng(&mut self, rng: &mut impl rand::Rng) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\n"}
{"message":"unused import: `u16_to_bits_BE`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/condEval.rs","byte_start":72,"byte_end":86,"line_start":2,"line_end":2,"column_start":28,"column_end":42,"is_primary":true,"text":[{"text":"use super::{bits_to_u16_BE,u16_to_bits_BE,RingElm,BinElm,ic::*};","highlight_start":28,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/condEval.rs","byte_start":71,"byte_end":86,"line_start":2,"line_end":2,"column_start":27,"column_end":42,"is_primary":true,"text":[{"text":"use super::{bits_to_u16_BE,u16_to_bits_BE,RingElm,BinElm,ic::*};","highlight_start":27,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `u16_to_bits_BE`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/condEval.rs:2:28\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse super::{bits_to_u16_BE,u16_to_bits_BE,RingElm,BinElm,ic::*};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `ring`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/beavertuple.rs","byte_start":99,"byte_end":103,"line_start":4,"line_end":4,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"use crate::{ring, Group};","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/beavertuple.rs","byte_start":99,"byte_end":105,"line_start":4,"line_end":4,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"use crate::{ring, Group};","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `ring`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/beavertuple.rs:4:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::{ring, Group};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::mbeaver::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/mbeaver.rs","byte_start":6088,"byte_end":6105,"line_start":222,"line_end":222,"column_start":9,"column_end":26,"is_primary":true,"text":[{"text":"    use crate::mbeaver::*;    ","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/mbeaver.rs","byte_start":6084,"byte_end":6106,"line_start":222,"line_end":222,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"    use crate::mbeaver::*;    ","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::mbeaver::*`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mbeaver.rs:222:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::mbeaver::*;    \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::ring`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/qmatrix.rs","byte_start":83,"byte_end":94,"line_start":5,"line_end":5,"column_start":5,"column_end":16,"is_primary":true,"text":[{"text":"use crate::ring;","highlight_start":5,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/qmatrix.rs","byte_start":79,"byte_end":95,"line_start":5,"line_end":5,"column_start":1,"column_end":17,"is_primary":true,"text":[{"text":"use crate::ring;","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::ring`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/qmatrix.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::ring;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::Share`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/ring.rs","byte_start":4,"byte_end":16,"line_start":1,"line_end":1,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"use crate::Share;","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/ring.rs","byte_start":0,"byte_end":17,"line_start":1,"line_end":1,"column_start":1,"column_end":18,"is_primary":true,"text":[{"text":"use crate::Share;","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::Share`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ring.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::Share;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `std::convert::TryInto`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/ring.rs","byte_start":114,"byte_end":135,"line_start":6,"line_end":6,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"use std::convert::TryInto;","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/ring.rs","byte_start":110,"byte_end":136,"line_start":6,"line_end":6,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"use std::convert::TryInto;","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::convert::TryInto`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ring.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::convert::TryInto;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to 81 previous errors; 6 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 81 previous errors; 6 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0432, E0460, E0519.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0432, E0460, E0519.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0432`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0432`.\u001b[0m\n"}
